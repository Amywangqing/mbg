<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
	<!--<context id="DB2Tables" targetRuntime="MyBatis3Simple">这个实在不知道怎么解释，
	反正就是大环境targetRuntime 可选项，可填值为MyBatis3，MyBatis3Simple（默认的），Ibatis2Java2，Ibatis2Java5  -->
	<context id="DB2Tables" targetRuntime="MyBatis3">
		<commentGenerator>
			<property name="suppressAllComments" value="true" />
		</commentGenerator>
		
		<!--jdbc的数据库连接 -->
		<jdbcConnection driverClass="com.mysql.jdbc.Driver"
			connectionURL="jdbc:mysql://localhost:3306/wq" userId="root"
			password="wangqing">
		</jdbcConnection>

 		<!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->
		<javaTypeResolver>
			<property name="forceBigDecimals" value="false" />
		</javaTypeResolver>

		<!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类
           targetPackage     指定生成的model生成所在的包名
           targetProject     指定在该项目下所在的路径
       -->
		<!-- pojo生成的地方 -->
		<javaModelGenerator targetPackage="com.qingfeng.pojo"
			targetProject="src/main/java">
			<!-- 是否允许子包，即targetPackage.schemaName.tableName -->
			<property name="enableSubPackages" value="false" />
			<!-- 是否对model添加 构造函数 -->
			<property name="constructorBased" value="false"/>
			<!-- 是否对类CHAR类型的列的数据进行trim操作 -->
			<property name="trimStrings" value="true" />
            <!--  自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter； -->
            <!-- <property name="constructorBased" value="true"/> -->
            <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
			<property name="immutable" value="false"/>
		</javaModelGenerator>

		<!--mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 -->
		<!-- sql映射文件生成的地方 -->
		<sqlMapGenerator targetPackage="mappers"
			targetProject="src/main/resources">
			 <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，
			 最终生成的类放在这个package下，默认为false -->
			<property name="enableSubPackages" value="true" />
		</sqlMapGenerator>

		<!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码
                type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象
                type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
                type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口
        -->
		<!-- targetPackage：mapper接口dao生成的位置 -->
		<!-- dao接口生成的地方 -->
		<javaClientGenerator type="XMLMAPPER"
			targetPackage="com.qingfeng.mapper" targetProject="src/main/java">
			 <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
			<!-- enableSubPackages:是否让schema作为包的后缀 -->
			<property name="enableSubPackages" value="false" />
		</javaClientGenerator>

		<!-- 只要是数据库对应的pojo，我们都以T开头 -->
		<!-- 指定要逆向的每一张表,用户表 -->
		<table tableName="t_user" domainObjectName="TUser" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false"></table>
		<table tableName="t_cart" domainObjectName="TCart" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false"></table>



	</context>
</generatorConfiguration>